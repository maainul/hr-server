Updated Service Function with Dynamic Sorting
javascript


import DepartmentModel from "../model/departmentModel.js";

export const getAllDepartmentWithPaginationService = async ({ req }) => {
    try {
        // Extract query parameters for search and sort
        const { search = '', sort = 'latest', page = 1, limit = 10 } = req.query;

        // Conditions for searching filters
        let queryObject = {};

        // Check Search for Query
        if (search) {
            // Search by name or dptCode
            queryObject = {
                $or: [
                    { name: { $regex: search, $options: "i" } },
                    { dptCode: { $regex: search, $options: "i" } }
                ]
            };
        }

        // Build Mongoose Query Based on Search
        let queryResult = DepartmentModel.find(queryObject);

        // Dynamic Sorting
        const sortOptions = {
            'latest': '-createdAt',
            'oldest': 'createdAt'
        };

        if (sort in sortOptions) {
            queryResult = queryResult.sort(sortOptions[sort]);
        } else {
            const [field, order] = sort.split('-');
            if (['a', 'z'].includes(order)) {
                const sortOrder = order === 'a' ? '' : '-';
                queryResult = queryResult.sort(`${sortOrder}${field}`);
            }
        }

        // Pagination
        const pageNumber = Number(page);
        const limitNumber = Number(limit);
        const skip = (pageNumber - 1) * limitNumber;

        // Apply Pagination
        queryResult = queryResult.skip(skip).limit(limitNumber);

        // Per page Data Count = Total Data Count Based on Query Search
        const currentPageDataCount = await DepartmentModel.countDocuments(queryObject);

        // Total Data Count
        const totalDataCount = await DepartmentModel.countDocuments(queryObject);

        // Number of Pages
        const numberOfPages = Math.ceil(totalDataCount / limitNumber);

        // Execute Query For List of Data
        const data = await queryResult;

        return {
            currentPageData: currentPageDataCount,
            totalData: totalDataCount,
            totalNumberOfPages: numberOfPages,
            data: data,
        };
    } catch (error) {
        throw new Error(`Error in getAllDepartmentWithPaginationService: ${error.message}`);
    }
}



Explanation
Query Parameter Extraction:

Extract the search, sort, page, and limit parameters from the request query with default values.
Query Object Construction:

If the search parameter is provided, the queryObject is built to use the $or operator, allowing for searching by either name or dptCode.
Dynamic Sorting:

Define sortOptions for predefined sorting cases like latest and oldest.
For other sorting options, split the sort parameter into field and order.
Check if order is either 'a' (ascending) or 'z' (descending) and construct the sorting string dynamically.
Example: dptCode-a will sort by dptCode in ascending order, and dptCode-z will sort by dptCode in descending order.
Pagination:

Apply pagination based on the page and limit query parameters.
Data Counts and Results:

Calculate the total number of documents matching the search criteria and the number of pages.
Return the paginated results along with the current page data count, total data count, and number of pages.



// import mongoose from 'mongoose';
// import { MongoMemoryServer } from 'mongodb-memory-server';
// import request from 'supertest';
// import express from 'express'
// import DepartmentModel from '../model/departmentModel.js'; // Ensure correct path
// import dotenv from 'dotenv';
// import departmentRoutes from '../routes/departmentRoutes.js'
// const url = '/api/v1/department/create';

// dotenv.config()

// const app = express()
// app.use(express.json())

// app.use('/api/v1/department', departmentRoutes)

// const PORT = 8081;


// let mongoServer;
// let server
// beforeAll(async () => {
//     try {
//         mongoServer = await MongoMemoryServer.create();
//         const uri = mongoServer.getUri();
//         // Check if mongoose is already connected to avoid multiple connections
//         if (mongoose.connection.readyState === 0) { // 0 means disconnected
//             await mongoose.connect(uri, {
//                 serverSelectionTimeoutMS: 20000, // Increase timeout for server selection
//                 socketTimeoutMS: 45000 // Increase socket timeout
//             });
//         }
//         server = app.listen(PORT, () => {
//             console.log('Server running on port', PORT);
//         });
//     } catch (error) {
//         console.error('Error setting up test environment:', error);
//     }
// });

// afterAll(async () => {
//     try {
//         console.log('Disconnecting mongoose...');
//         if (mongoose.connection.readyState !== 0) {
//             await mongoose.disconnect();
//         }
//         console.log('Stopping MongoMemoryServer...');
//         if (mongoServer) {
//             await mongoServer.stop();
//         }
//         await server.close()
//     } catch (error) {
//         console.error('Error tearing down test environment:', error);
//     }
// });


// beforeEach(async () => {
//     // Clear the database before each test
//     await DepartmentModel.deleteMany({});
// }, 30000);

// afterEach(async () => {
//     // Ensure that no connections or open handles are left
//     jest.clearAllTimers();
//     await DepartmentModel.deleteMany({});
// }, 30000);


// describe(`POST ${url}`, () => {
//     it('should create a new department', async () => {
//         const res = await request(app)
//             .post('/api/v1/department/create')
//             .send({
//                 name: 'HR',
//                 dptCode: 'HR001',
//                 dptLocation: 'New York',
//                 status: 1
//             });
//         expect(res.statusCode).toEqual(201);
//         expect(res.body).toHaveProperty('success', true);
//         expect(res.body).toHaveProperty('newDepartment');
//         expect(res.body.newDepartment).toHaveProperty('name', 'HR');
//         expect(res.body.newDepartment).toHaveProperty('dptCode', 'HR001');
//         expect(res.body.newDepartment).toHaveProperty('dptLocation', 'New York');
//     }, 30000);

//     it('should not create a department with duplication name', async () => {
//         await DepartmentModel.create({
//             name: 'HR',
//             dptCode: 'HR001',
//             dptLocation: 'New York',
//             status: 1
//         });

//         const res = await request(app)
//             .post(url)
//             .send({
//                 name: 'HR',
//                 dptCode: 'HR02',
//                 dptLocation: 'Los Angeles',
//                 status: 1
//             });

//         expect(res.statusCode).toEqual(400);
//         expect(res.body).toHaveProperty('success', false);
//         expect(res.body.error).toEqual(expect.arrayContaining([
//             expect.objectContaining({
//                 label: 'name',
//                 message: 'Department Name Already Exists'
//             })
//         ]));
//     }, 30000);

//     it('should not create a department with duplicate code', async () => {
//         await DepartmentModel.create({
//             name: 'HR',
//             dptCode: 'HR001',
//             dptLocation: 'New York',
//             status: 1
//         });

//         const res = await request(app)
//             .post(url)
//             .send({
//                 name: 'Finance',
//                 dptCode: 'HR001',
//                 dptLocation: 'Los Angeles',
//                 status: 1
//             });

//         expect(res.statusCode).toEqual(400);
//         expect(res.body).toHaveProperty('success', false);
//         expect(res.body.error).toEqual(expect.arrayContaining([
//             expect.objectContaining({
//                 label: 'dptCode',
//                 message: 'Department Code Already Exists'
//             })
//         ]));
//     }, 30000);
// });
